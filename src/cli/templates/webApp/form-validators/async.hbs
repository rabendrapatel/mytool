import { FormControl, AbstractControl, AsyncValidatorFn } from '@angular/forms';
import { HandyNgAsyncValidator } from '@handy-ng/core';
import { NgValidationError } from '@handy-ng/modules/handy-form/validators/interfaces';

class {{ UcFirst validatorName }}Validator extends HandyNgAsyncValidator {

  public static validate(errMsg: string = 'This field is invalid'): AsyncValidatorFn {

    return (control: FormControl | AbstractControl): Promise<NgValidationError> => {

      let { value } = control;

      if ({{ UcFirst validatorName }}Validator.emptyValueIsValid && {{ UcFirst validatorName }}Validator.isEmpty(value)) {
        return Promise.resolve(null);
      }

      return new Promise((resolve, reject) => {

        // ? Control debounce time is handled by handy form control, 
        // ? no need to handle it here  
        // ! has to resolve null if field is valid

        setTimeout(() => {
          
          resolve({{ UcFirst validatorName }}Validator.returnError('Just some error'));

        }, 2000);

      })

    }


  }

}

export const {{ LcFirst validatorName }} = {{ UcFirst validatorName }}Validator.validate;

// import {{ LcFirst validatorName }} from '@ng-shared/form-validators';