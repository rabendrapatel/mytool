import { ServerMiddleware, _PrivateRequest, ConfigData, _PrivateResponse } from "@handy/types";
import { HandyConfigService, HandyJwtService, HandyErrorService, HandyUtilsService, HandyUserService } from '@services';
import * as bodyParser from 'body-parser';
import * as cookieParser from 'cookie-parser';
import { CorsOptionsDelegate } from 'cors';
import { Application } from 'express';
export declare class DefaultHandyMiddleware implements ServerMiddleware {
    protected _handyConfigService: HandyConfigService;
    protected _handyErrorService: HandyErrorService;
    protected _handyJwtService: HandyJwtService;
    protected _handyUtilsService: HandyUtilsService;
    protected _handyUserService: HandyUserService;
    protected _bodyParser: typeof bodyParser;
    protected _cookieParser: typeof cookieParser;
    protected _allowedCorsOrigins: ConfigData['cors']['allowedOrigins'];
    protected _corsActive: boolean;
    protected _corsMethods: ConfigData['cors']['methodsToCheck'];
    protected _handyCookieObjectValPrefix: string;
    protected _refreshTokenKoeficient: number;
    constructor();
    middleware(app: Application): void;
    protected _addStartedAt(app: Application): void;
    protected _bodyParserMiddleware(app: Application): void;
    protected _cookieParserMiddleware(app: Application): void;
    protected _corsMiddleware(app: Application): void;
    protected _requestAndResponseExtender(app: Application): void;
    protected _parseUserDataFromToken(app: Application): void;
    protected _extendRefreshToken(app: Application): void;
    protected _addRequestMethodGetter(request: _PrivateRequest): void;
    protected _addCookieGetter(request: _PrivateRequest): void;
    protected _addCookieSetter(response: _PrivateResponse): void;
    protected _addHeaderGetter(request: _PrivateRequest): void;
    protected _addHeadersSetter(response: _PrivateResponse): void;
    protected _addJsonResponse(response: _PrivateResponse): void;
    protected _addResponseClientRedirect(response: _PrivateResponse): void;
    protected _addErrorResponse(request: _PrivateRequest, response: _PrivateResponse): void;
    protected _addHasNonPublicRoutesAccessCheck(request: _PrivateRequest): void;
    protected _corsOptionsDelegate: CorsOptionsDelegate;
}
