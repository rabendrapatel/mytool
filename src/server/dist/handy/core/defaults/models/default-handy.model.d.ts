import { Schema, Model, Document, FilterQuery } from 'mongoose';
import { HandyJwtService, HandyConfigService, HandyErrorService } from '@services';
import { ModelSettings, MongooseModelInterfaces, HandyModelDeclaration, MongooseFieldType, MongoModelLevelAccesRules, MongoFieldAccess, MongooseModelFieldValidator, HandyMongooseSystemFields, HandyMongooseModelFindOpts, MongooseSortingOptions, SingleOrArrayCombo, MognooseSearchRegexOptions, HandyMongooseSelect, HandyError, ErrorPriority, ErrorReasons, ServerRequest, ServerResponse, UnSignedObject, HandyMongooseModelPublicFindOpts, MongooseIncludeDeletedOption, HandyMongooseFindResults, HandyMongooseModelPublicFindOneOpts, HandyMongooseFindOneResult, HandyMongooseModelUpdateOpts, HandyMongooseUpdateResult, HandyMongooseRemoveResult, DbActionType, HandyMongooseRestoreResult, HandyMongooseDeletedWhere, HandyMongooseDistinctManyResults, HandyMongoosePopulateOptions, HandyMongooseDistinctOneResults, MongoFielLeveldAcessRules, OriginalMongoosePopulateOptions, MongooseSortingDirection, HandyMongooseResultsPagination, CombinedUserMongoAccessValidator, MongooseModelService, ServerRequestUser, MongooseDefaultPublicMethods, ApiRequestListenerSettings } from '@handy/types';
import { ModelMiddlewaresHolder } from '@handy/core/decorators';
declare type mongooseModelInterface<modelInterface> = modelInterface & Document;
export declare class DefaultHandyModelClass<definedModelInterfaces extends MongooseModelInterfaces> implements MongooseModelService {
    protected _handyConfig: HandyConfigService;
    protected _handyJwtService: HandyJwtService;
    protected _handyError: HandyErrorService;
    private __mongoSettings;
    private __shape;
    protected _ModelSettings: ModelSettings<definedModelInterfaces>;
    protected _modelDeclaration: HandyModelDeclaration<definedModelInterfaces['allFields']>;
    protected _modelName: string;
    protected _modelFields: definedModelInterfaces['allFields'][];
    protected _modelFieldsLen: number;
    protected _searchableFields: any[];
    protected _searchableFieldsLen: number;
    protected _stringSearchableFieldTypes: MongooseFieldType[];
    protected _numberSearchableFieldTypes: MongooseFieldType[];
    protected _modelLevelAccessRules: MongoModelLevelAccesRules<definedModelInterfaces['allFields']>;
    protected _fieldLevelAccessRules: {
        [key: string]: MongoFieldAccess<definedModelInterfaces['allFields']>;
    };
    protected _validators: {
        [key in definedModelInterfaces['allFields']]?: MongooseModelFieldValidator[];
    };
    protected _middlewares: ModelMiddlewaresHolder[];
    protected _Schema: Schema;
    protected _Model: Model<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>;
    protected _systemFieldsList: ReadonlyArray<HandyMongooseSystemFields>;
    protected _systemReffrenceAbleFieldsList: ReadonlyArray<HandyMongooseSystemFields>;
    protected _possibleNumberRegex: RegExp;
    protected _hasDigitRegex: RegExp;
    protected _fieldsToIndex: {
        name: definedModelInterfaces['allFields'];
        unique: boolean | 'all' | 'active';
        sparse: boolean;
        index: boolean;
    }[];
    protected _defaultFindOptions: HandyMongooseModelFindOpts<definedModelInterfaces['allFields']>;
    protected _defaultSort: MongooseSortingOptions<definedModelInterfaces['allFields']> | undefined;
    protected _defaultQueryLimit: number;
    protected _stringTrimming: boolean;
    protected _defaultReturnUpdatedDocOnUpdate: boolean;
    protected _defaultValidationOnUpdate: boolean;
    protected _useSoftdelete: boolean;
    protected _useCreatedAt: boolean;
    protected _useCreatedBy: boolean;
    protected _useChangesHistory: boolean;
    protected _limitChangesHistoryLength: boolean;
    protected _changesHistoryLength: number;
    protected _keysToRemoveFromChangesHistory: string[];
    protected _defaultSearchableFields: SingleOrArrayCombo<definedModelInterfaces['searchableFields']>;
    protected _searchDefaultOptions: MognooseSearchRegexOptions;
    defaultSelect: HandyMongooseSelect<definedModelInterfaces['allFields']>;
    constructor();
    protected _init(): void;
    protected _generateCliHelper(): void;
    protected _generateModelSchema(): void;
    protected _handleIndexes(): void;
    protected _handleMiddlewares(): void;
    protected _handleAutomaticFields(): void;
    protected _handleDefaultMethodsObjects(): void;
    protected _handleSearchableFields(): void;
    protected _handleFieldsIndexes(): void;
    createOne(doc: definedModelInterfaces['createShape'], request?: ServerRequest, response?: ServerResponse, customSaveOpts?: any, validateAccess?: boolean): Promise<definedModelInterfaces['fullModelShape']>;
    createMany(docs: definedModelInterfaces['createShape'][], request?: ServerRequest, response?: ServerResponse, customSaveOpts?: any, validateAccess?: boolean): Promise<definedModelInterfaces['fullModelShape'][]>;
    find<T extends HandyMongooseSelect<definedModelInterfaces["allFields"]> = definedModelInterfaces['defaultSelect']>(where?: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, select?: T, findParams?: HandyMongooseModelPublicFindOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseFindResults<definedModelInterfaces, T>>;
    findOne<T extends HandyMongooseSelect<definedModelInterfaces["allFields"]> = definedModelInterfaces['defaultSelect']>(where?: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, select?: T, findParams?: HandyMongooseModelPublicFindOneOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseFindOneResult<definedModelInterfaces, T>>;
    findById<T extends HandyMongooseSelect<definedModelInterfaces["allFields"]> = definedModelInterfaces['defaultSelect']>(_id: definedModelInterfaces['idType'], select?: T, findParams?: HandyMongooseModelPublicFindOneOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseFindOneResult<definedModelInterfaces, T>>;
    updateMany(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, update: UnSignedObject, updateOptions?: HandyMongooseModelUpdateOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseUpdateResult>;
    updateOne(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, update: UnSignedObject, updateOptions?: HandyMongooseModelUpdateOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseUpdateResult>;
    deleteMany(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseRemoveResult>;
    deleteOne(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseRemoveResult>;
    deleteById(_id: definedModelInterfaces['idType'], request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseRemoveResult>;
    restoreOne(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseRestoreResult>;
    restoreMany(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseRestoreResult>;
    restoreById(_id: definedModelInterfaces['idType'], request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseRestoreResult>;
    countDocuments(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, exact?: boolean, deleted?: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<number>;
    distinct<T extends definedModelInterfaces["allFields"] | definedModelInterfaces["allFields"][]>(fieldNames: T, where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, deleted?: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseDistinctManyResults<definedModelInterfaces, T>>;
    aggregate(pipeline: UnSignedObject[], deletedDocsSpecs?: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>): import("mongoose").Aggregate<any[]>;
    search<T extends HandyMongooseSelect<definedModelInterfaces["allFields"]> = definedModelInterfaces['defaultSelect']>(searchValue: string | number, fields?: SingleOrArrayCombo<definedModelInterfaces['searchableFields']>, select?: T, findParams?: HandyMongooseModelPublicFindOpts<definedModelInterfaces['allFields']> & {
        regexOptions?: MognooseSearchRegexOptions;
    }, additionalSearchQueries?: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>[], additionalFilterQueries?: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>[], request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseFindResults<definedModelInterfaces, T>>;
    protected _apiCreateMany(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: definedModelInterfaces['createShape'][]): void;
    protected _apiCreateOne(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiFind(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiFindOne(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiFindById(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiUpdateMany(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiUpdateOne(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiDeleteMany(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiDeleteOne(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiDeleteById(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiRestoreMany(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiRestoreOne(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiRestoreById(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiCountDocuments(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiDistinct(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _apiSearch(request: ServerRequest, response: ServerResponse, user: ServerRequestUser, query?: UnSignedObject, body?: UnSignedObject): void;
    protected _find<T extends HandyMongooseSelect<definedModelInterfaces["allFields"]> = definedModelInterfaces['defaultSelect']>(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, select?: T, findParams?: HandyMongooseModelFindOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseFindResults<definedModelInterfaces, T>>;
    protected _findOne<T extends HandyMongooseSelect<definedModelInterfaces["allFields"]> = definedModelInterfaces['defaultSelect']>(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, select?: T, findParams?: HandyMongooseModelFindOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseFindOneResult<definedModelInterfaces, T>>;
    protected _updateMany(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, update: UnSignedObject, updateOptions?: HandyMongooseModelUpdateOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseUpdateResult>;
    protected _updateOne(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, update: UnSignedObject, updateOptions?: HandyMongooseModelUpdateOpts<definedModelInterfaces['allFields']>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseUpdateResult>;
    protected _hardDelete(where: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>, single?: boolean, request?: ServerRequest, response?: ServerResponse): Promise<HandyMongooseRemoveResult>;
    protected _distinct<T extends definedModelInterfaces["allFields"]>(fieldName: T, where?: any, deleted?: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, request?: ServerRequest, response?: ServerResponse, validateAccess?: boolean): Promise<HandyMongooseDistinctOneResults<definedModelInterfaces, T>>;
    protected _hasModelAccessRules(action: DbActionType<definedModelInterfaces['allFields']>): boolean;
    protected _canCreateDocs(request: ServerRequest, response: ServerResponse, validateAccess: boolean): Promise<boolean>;
    protected _canDeleteOrRestoreDocs(where: UnSignedObject, request: ServerRequest, response: ServerResponse, action: DbActionType<definedModelInterfaces['allFields']>, validateAccess: boolean): Promise<boolean>;
    protected _canUpdateDocs(request: ServerRequest, response: ServerResponse, where: UnSignedObject, updateQuery: {}, deleted: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, validateAccess?: boolean): Promise<boolean>;
    protected _canReadDocs(where: UnSignedObject, request: ServerRequest, response: ServerResponse, selectStr: string, deleted: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, validateAccess?: boolean): Promise<boolean>;
    protected _canReadOrUpdateDataBasedOnResolvedModelLevelAccessRules(where: UnSignedObject, request: ServerRequest, response: ServerResponse, deleted: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, modeleLevelChecksResults: boolean[], hasFieldLevelRules: boolean, fieldsLevelRules: MongoFielLeveldAcessRules<definedModelInterfaces["allFields"]>[], action: DbActionType<definedModelInterfaces['allFields']>, additionalQuery?: UnSignedObject): Promise<boolean>;
    protected _checkFieldTypeValidityForAccessReffrence(fieldName: definedModelInterfaces["allFields"], type: 'groupId' | 'userId'): false | string;
    protected _extractUserIdFromRequest(request?: ServerRequest): number;
    protected _extractSessionIdFromRequest(request?: ServerRequest): string;
    protected _parseSelect(select?: HandyMongooseSelect<definedModelInterfaces['allFields']>): string;
    protected _parseMongoosePopulateOptions(populateOptions: HandyMongoosePopulateOptions<string>): OriginalMongoosePopulateOptions;
    protected _parseSortOptions(sortingOptions: MongooseSortingOptions<string>): {
        [key: string]: MongooseSortingDirection;
    };
    protected _parsePaginationData(totalRecordsCount: number, page: number, limit: number, docs: any[]): HandyMongooseResultsPagination;
    protected _getUpdatedFieldsFromQuery(updateQuery?: any): definedModelInterfaces['allFields'][];
    protected _getUpdateFieldsAccessRules(updateQuery?: any): {
        fieldsLevelRules: MongoFielLeveldAcessRules<definedModelInterfaces['allFields']>[];
        hasFieldLevelRules: boolean;
        hasSystemField: boolean;
    };
    protected _getReadFieldsFromSelectString(selectStr: string): definedModelInterfaces['allFields'][];
    protected _getReadFieldsAccessRules(selectStr: string): {
        fieldsLevelRules: MongoFielLeveldAcessRules<definedModelInterfaces['allFields']>[];
        hasFieldLevelRules: boolean;
    };
    protected _getFunctionAccessValidatorPromise(rule: CombinedUserMongoAccessValidator<definedModelInterfaces['allFields']>, request: ServerRequest, action: DbActionType<definedModelInterfaces['allFields']>, conditionsQueryOrDoc?: any, updateQuery?: any): Promise<boolean>;
    protected _getDocFieldsList(doc: definedModelInterfaces['fullModelShape']): definedModelInterfaces['allFields'][];
    protected _getDeletedWhere(deletedDocsSpecs: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>): HandyMongooseDeletedWhere;
    protected _getFieldLevelAccessPromises(where: UnSignedObject, action: DbActionType<definedModelInterfaces['allFields']>, deleted: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, fieldsAccessRules: MongoFielLeveldAcessRules<definedModelInterfaces["allFields"]>[], request: ServerRequest, response: ServerResponse, additionalQuery: UnSignedObject): Promise<boolean>[];
    protected _getReffrenceQueryForFieldAsyncCheck(fieldName: definedModelInterfaces["allFields"], type: 'groupId' | 'userId', request: ServerRequest): {
        [key: string]: number;
    } | string;
    protected _getSoftDeleteUpdateOptions(request: ServerRequest): {
        updateOptions: HandyMongooseModelUpdateOpts<definedModelInterfaces['allFields']>;
        update: UnSignedObject;
    };
    protected _getRestoreUpdateOptions(request: ServerRequest): {
        updateOptions: HandyMongooseModelUpdateOpts<definedModelInterfaces['allFields']>;
        update: UnSignedObject;
    };
    protected _getFinalSearchQuery(searchValue: string | number, fields?: SingleOrArrayCombo<definedModelInterfaces['searchableFields']>, findParams?: HandyMongooseModelPublicFindOpts<definedModelInterfaces['allFields']> & {
        regexOptions?: MognooseSearchRegexOptions;
    }, additionalSearchQueries?: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>[], additionalAndQueries?: FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>[]): FilterQuery<mongooseModelInterface<definedModelInterfaces['fullModelShape']>>;
    protected _handleError(error: HandyError | any, priority?: ErrorPriority, errorCode?: ErrorReasons, request?: ServerRequest, response?: ServerResponse, source?: Error): HandyError;
    protected _removeUnallowedSymbolsFromUpdateHistoryData(updateVal: any): any;
    protected _lightenHistoryData(doc?: any): number;
    protected _compareAccessFieldsCount(where: any, deleted: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, request: ServerRequest, response: ServerResponse, groupIdField: definedModelInterfaces["allFields"], userIdField: definedModelInterfaces["allFields"]): Promise<boolean>;
    protected _resolveModelLevelReadUpdateOrDeleteRules(modelLevelRules: MongoFielLeveldAcessRules<definedModelInterfaces["allFields"]>, request: ServerRequest, response: ServerResponse, where: UnSignedObject, deleted: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, action: DbActionType<definedModelInterfaces['allFields']>, additionalQuery?: UnSignedObject): Promise<boolean[]>;
    protected _resolveFieldAccessRules(where: UnSignedObject, action: DbActionType<definedModelInterfaces['allFields']>, deleted: MongooseIncludeDeletedOption<definedModelInterfaces["allFields"]>, fieldsAccessRules: MongoFielLeveldAcessRules<definedModelInterfaces["allFields"]>[], request: ServerRequest, response: ServerResponse, additionalQuery?: UnSignedObject): Promise<boolean>;
    protected _setDefaultUpdateOptions(query: any, args: any[]): Promise<any>;
    private __defaultMethodsRoutesSettings;
    private __parseRoutingSettings;
    private __getMethodRoutingSettings;
    private __parseLevelRules;
    private __getActionLevelRoutingRestrictions;
    private __getMethodExplicitRoutingRestrictions;
    private __getActionDefaultRoutingRestrictions;
    private __getLevelDefaultRoutingRestrictions;
    protected _getRequestTypeBasedFromMethodName(methodName: MongooseDefaultPublicMethods): ApiRequestListenerSettings['requestType'];
}
export {};
