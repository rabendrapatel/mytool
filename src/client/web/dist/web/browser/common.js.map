{"version":3,"sources":["./src/app/modules/shared/form-validators/future-date.validator.ts","./src/app/modules/shared/form-validators/index.ts","./src/app/modules/shared/form-validators/link-validator.validator.ts","./src/app/modules/shared/form-validators/max-files.validator.ts","./src/app/modules/shared/form-validators/required-one-of.validator.ts","./src/app/modules/shared/form-validators/time-slot.validator.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { ValidatorFn, FormControl, AbstractControl } from '@angular/forms';\r\nimport { NgValidationError } from '@handy-ng/modules/handy-form/validators/interfaces';\r\nimport { HandyNgSyncValidator } from '@handy-ng/core';\r\n\r\nclass FutureDateValidator extends HandyNgSyncValidator {\r\n\r\n  // Return true if value is invalid\r\n  public static isInValidIf(value: any, secondsOffset: number = 0): boolean {\r\n\r\n    if (typeof value !== 'number') {\r\n      return false;\r\n    }\r\n\r\n    let thisMoment: number = new Date().getTime() + (secondsOffset * 1000);\r\n    return thisMoment > value;\r\n\r\n  }\r\n\r\n  public static validate(errMsg: string = `This field can't be a passed date`, secondsOffset: number = 0): ValidatorFn {\r\n\r\n    return (control: FormControl | AbstractControl): NgValidationError => {\r\n\r\n      let { value } = control;\r\n\r\n      if (FutureDateValidator.emptyValueIsValid && FutureDateValidator.isEmpty(value)) {\r\n        return null;\r\n      }\r\n\r\n      let invalid: boolean = FutureDateValidator.isInValidIf(value, secondsOffset);\r\n\r\n      if (invalid) {\r\n        return FutureDateValidator.returnError(errMsg);\r\n      }\r\n\r\n      // ! has to return null if field is valid\r\n      return null;\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const futureDate = FutureDateValidator.validate;\r\n\r\n// import futureDate from '@ng-shared/form-validators';","export * from '@handy-ng/modules/handy-form/validators';\r\nexport * from './time-slot.validator';\r\nexport * from './future-date.validator';\r\nexport * from './max-files.validator';\r\nexport * from './link-validator.validator';\r\nexport * from './required-one-of.validator';","import { ValidatorFn, FormControl, AbstractControl } from '@angular/forms';\r\nimport { NgValidationError } from '@handy-ng/modules/handy-form/validators/interfaces';\r\nimport { HandyNgSyncValidator } from '@handy-ng/core';\r\n\r\nclass LinkValidatorValidator extends HandyNgSyncValidator {\r\n\r\n  public static reg: RegExp = new RegExp(/^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/gm);\r\n\r\n  // Return true if value is invalid\r\n  public static isInValidIf(value: string): boolean {\r\n    return !LinkValidatorValidator.reg.test(value);\r\n  }\r\n\r\n  public static validate(errMsg: string = 'This field is invalid'): ValidatorFn {\r\n\r\n    return (control: FormControl | AbstractControl): NgValidationError => {\r\n\r\n      let { value } = control;\r\n\r\n      if (LinkValidatorValidator.emptyValueIsValid && LinkValidatorValidator.isEmpty(value)) {\r\n        return null;\r\n      }\r\n\r\n      let invalid: boolean = LinkValidatorValidator.isInValidIf(value);\r\n      if (invalid) {\r\n        return LinkValidatorValidator.returnError(errMsg);\r\n      }\r\n\r\n      // ! has to return null if field is valid\r\n      return null;\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const linkValidator = LinkValidatorValidator.validate;\r\n\r\n// import linkValidator from '@ng-shared/form-validators';","import { ValidatorFn, FormControl, AbstractControl } from '@angular/forms';\r\nimport { NgValidationError } from '@handy-ng/modules/handy-form/validators/interfaces';\r\nimport { HandyNgSyncValidator } from '@handy-ng/core';\r\n\r\nclass MaxFilesValidator extends HandyNgSyncValidator {\r\n\r\n  // Return true if value is invalid\r\n  public static isInValidIf(value: any, maxFiles: number): boolean {\r\n    \r\n    if (Array.isArray(value)) {\r\n      return value.length > maxFiles;  \r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n  public static validate(maxFiles: number): ValidatorFn {\r\n\r\n    return (control: FormControl | AbstractControl): NgValidationError => {\r\n\r\n      let { value } = control;\r\n\r\n      if (MaxFilesValidator.emptyValueIsValid && MaxFilesValidator.isEmpty(value)) {\r\n        return null;\r\n      }\r\n\r\n      let invalid: boolean = MaxFilesValidator.isInValidIf(value, maxFiles);\r\n\r\n      if (invalid) {\r\n        return MaxFilesValidator.returnError(`Max ${maxFiles} file${maxFiles > 1 ? 's' : ''} allowed`);\r\n      }\r\n\r\n      // ! has to return null if field is valid\r\n      return null;\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const maxFiles = MaxFilesValidator.validate;\r\n\r\n// import maxFiles from '@ng-shared/form-validators';","import { ValidatorFn, FormControl, AbstractControl, FormGroup } from '@angular/forms';\r\nimport { NgValidationError } from '@handy-ng/modules/handy-form/validators/interfaces';\r\nimport { HandyNgSyncValidator } from '@handy-ng/core';\r\nimport { UnSignedObject } from '@handy-ng/types';\r\n\r\nclass RequiredOneOfValidator extends HandyNgSyncValidator {\r\n\r\n  // Return true if value is invalid\r\n  public static isInValidIf(value: UnSignedObject = {}, fields: string[]): boolean {\r\n\r\n    let fieldsLen: number = fields.length;\r\n    for (let i = 0; i < fieldsLen; i++) {\r\n      const fieldName = fields[i];\r\n      \r\n      let isEMpty: boolean = RequiredOneOfValidator.isEmpty(value[fieldName]);\r\n      if (!isEMpty) {\r\n        return false;  \r\n      }\r\n\r\n    }\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n  public static emptyValueIsValid: boolean = false;\r\n\r\n  public static validate(fields: string[] = [], errMsg: string): ValidatorFn {\r\n\r\n    return (control: FormGroup): NgValidationError => {\r\n\r\n      let { value } = control;\r\n\r\n      if (RequiredOneOfValidator.emptyValueIsValid && RequiredOneOfValidator.isEmpty(value)) {\r\n        return null;\r\n      }\r\n\r\n      let invalid: boolean = RequiredOneOfValidator.isInValidIf(value, fields);\r\n\r\n      if (invalid) {\r\n        return RequiredOneOfValidator.returnError(errMsg);\r\n      }\r\n\r\n      // ! has to return null if field is valid\r\n      return null;\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const requiredOneOf = RequiredOneOfValidator.validate;\r\n\r\n// import requiredOnOf from '@ng-shared/form-validators';","import { ValidatorFn, FormControl, AbstractControl } from '@angular/forms';\r\nimport { NgValidationError } from '@handy-ng/modules/handy-form/validators/interfaces';\r\nimport { HandyNgSyncValidator } from '@handy-ng/core';\r\n\r\nclass TimeSlotValidator extends HandyNgSyncValidator {\r\n\r\n  // Return true if value is invalid\r\n  public static isInValidIf(value: number, pairControl: FormControl | AbstractControl, thisFieldIs: 'from' | 'to'): boolean {\r\n\r\n\r\n    let otherValue: number = pairControl.value;\r\n    let result: boolean = true;\r\n\r\n    switch (thisFieldIs) {\r\n      case 'from':\r\n\r\n        result = (value + 1) > otherValue;\r\n\r\n        break;\r\n\r\n      default:\r\n\r\n        result = (value - 1) < otherValue;\r\n\r\n        break;\r\n    }\r\n\r\n    if (!pairControl.valid) {\r\n      pairControl.updateValueAndValidity();\r\n    }\r\n\r\n    return result;\r\n\r\n  }\r\n\r\n  public static validate(pairControl: FormControl | AbstractControl, thisFieldIs: 'from' | 'to', errMsg: string = 'This field is invalid'): ValidatorFn {\r\n\r\n    return (control: FormControl | AbstractControl): NgValidationError => {\r\n\r\n      let { value } = control;\r\n      let otherValue = pairControl.value;\r\n\r\n      if (TimeSlotValidator.emptyValueIsValid && (TimeSlotValidator.isEmpty(value) || TimeSlotValidator.isEmpty(otherValue))) {\r\n        return null;\r\n      }\r\n\r\n      let invalid: boolean = TimeSlotValidator.isInValidIf(value, pairControl, thisFieldIs);\r\n\r\n      if (invalid) {\r\n        return TimeSlotValidator.returnError(errMsg);\r\n      }\r\n\r\n      // ! has to return null if field is valid\r\n      return null;\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport const timeSlot = TimeSlotValidator.validate;\r\n\r\n// import timeSlot from '@ng-shared/form-validators';"],"sourceRoot":"webpack:///"}